// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          String?   @default("USER")

    createdAt DateTime @default(now())

    accounts Account[]
    sessions Session[]
    Post     Post[]

    liked UserLiked[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//Liked Content
model UserLiked {
    id String @id @default(cuid())

    user   User   @relation(fields: [userId], references: [id])
    userId String

    post   Post   @relation(fields: [postId], references: [id])
    postId String
}

// Categories
model Category {
    id   String @id @default(cuid())
    slug String @unique

    name     String
    color    String
    imageUrl String

    Post Post[]
}

// Posts

model Post {
    id String @id @default(cuid())

    slug String @unique

    status PostStatus @default(PENDING)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title       String
    description String

    city        String
    phoneNumber String

    price Int @default(0)

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    category   Category? @relation(fields: [categoryId], references: [id])
    categoryId String?

    UserLiked UserLiked[]
}

enum PostStatus {
    PENDING
    ACTIVE
    ENDED
}
